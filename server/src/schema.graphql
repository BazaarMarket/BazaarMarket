scalar JSON
scalar Upload

## Application Types

type NonFungibleToken {
  contractInfo: ContractInfo!
  tokenId: Int!
  symbol: String!
  name: String!
  owner: String!
  extras: JSON!
}

type PublishedOperation {
  id: Int!
  hash: String!
  initiator: String!
  method: String!
  params: String!
  status: String!
  retry: Boolean!
}

type SettingsContracts {
  nftFaucet: String!
  nftFactory: String!
}

type SettingsAdmin {
  address: String!
  secret: String!
}

type Settings {
  rpc: String!
  admin: SettingsAdmin!
  contracts: SettingsContracts!
  bcdGuiUrl: String!
  bcdNetwork: String!
}

type ContractInfo {
  address: String!
  name: String!
}

type IpfsContent {
  cid: String!
  size: Int!
  url: String!
  publicGatewayUrl: String!
}

enum OperationStatusType {
  APPLIED
  FAILED
}

type OperationStatus {
  status: OperationStatusType!
  timestamp: String!
  error: JSON
}

type Stats {
  chainId: String!
  hash: String!
  level: Int!
  network: String!
  predecessor: String!
  protocol: String!
  timestamp: String!
}

## Toplevel Types

type Query {
  indexerStats: [Stats]!
  nfts(ownerAddress: String, contractAddress: String): [NonFungibleToken!]!
  contractNames(contractOwnerAddress: String, nftOwnerAddress: String): [ContractInfo!]!
  contractOperationStatus(contractAddress: String!, hash: String!): OperationStatus

  publishedOperationByHash(hash: String!): PublishedOperation
  settings: Settings!
}

type Mutation {
  createNonFungibleToken(
    owner_address: String!
    name: String!
    description: String!
    symbol: String!
    ipfs_cid: String!
  ): PublishedOperation!

  createNonFungibleTokenSync(
    owner_address: String!
    name: String!
    description: String!
    symbol: String!
    ipfs_cid: String!
  ): PublishedOperation!
}

type Subscription {
  operationSent: PublishedOperation
  operationConfirmed: PublishedOperation
}
