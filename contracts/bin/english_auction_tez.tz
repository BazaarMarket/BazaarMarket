{ parameter
    (or (or (nat %bid) (nat %cancel))
        (or (pair %configure
               (mutez %opening_price)
               (pair (mutez %min_raise)
                     (pair (timestamp %start_time)
                           (pair (nat %round_time)
                                 (pair (list %asset
                                          (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))
                                       (timestamp %end_time))))))
            (nat %resolve))) ;
  storage
    (pair (nat %current_id)
          (pair (nat %max_auction_time)
                (big_map %auctions
                   nat
                   (pair (address %owner)
                         (pair (mutez %current_bid)
                               (pair (bool %in_progress)
                                     (pair (timestamp %start_time)
                                           (pair (int %round_time)
                                                 (pair (list %asset
                                                          (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))
                                                       (pair (mutez %min_raise) (pair (timestamp %end_time) (address %highest_bidder)))))))))))) ;
  code { LAMBDA
           (pair (pair (list (pair address (list (pair nat nat)))) address) address)
           (list operation)
           { DUP ;
             CAR ;
             CAR ;
             MAP { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CDR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CDR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   PAIR ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   CAR ;
                   MAP { SWAP ; DUP ; DUG 2 ; CDR ; PAIR } ;
                   NIL (pair address (list (pair address (pair nat nat)))) ;
                   SWAP ;
                   DIG 2 ;
                   CAR ;
                   CDR ;
                   PAIR ;
                   CONS ;
                   SWAP ;
                   CAR ;
                   CONTRACT %transfer
                     (list (pair (address %from_)
                                 (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                   IF_NONE { PUSH string "Invalid FA2 Address" ; FAILWITH } {} ;
                   PUSH mutez 0 ;
                   DIG 2 ;
                   TRANSFER_TOKENS } ;
             SWAP ;
             DROP } ;
         LAMBDA
           (pair nat
                 (pair nat
                       (pair nat
                             (big_map
                                nat
                                (pair address
                                      (pair mutez
                                            (pair bool
                                                  (pair timestamp
                                                        (pair int
                                                              (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair timestamp address))))))))))))
           (pair address
                 (pair mutez
                       (pair bool
                             (pair timestamp
                                   (pair int
                                         (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair timestamp address))))))))
           { DUP ;
             CDR ;
             CDR ;
             CDR ;
             SWAP ;
             CAR ;
             GET ;
             IF_NONE { PUSH string "ASSET DOES NOT EXIST" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract unit)
           { CONTRACT unit ; IF_NONE { PUSH string "" ; FAILWITH } {} } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         DIG 4 ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { DIG 4 ;
                 DROP ;
                 SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CAR ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 ADD ;
                 NOW ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 AMOUNT ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SENDER ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 DIG 3 ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CAR ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 ADD ;
                 NOW ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 SELF ;
                 ADDRESS ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 CDR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 PUSH bool False ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 4 ;
                 CAR ;
                 PAIR ;
                 SOME ;
                 DIG 4 ;
                 UPDATE ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DIG 2 ;
                 CONS ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 INT ;
                 NOW ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SENDER ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 INT ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PUSH bool True ;
                 PAIR ;
                 PUSH mutez 0 ;
                 PAIR ;
                 SENDER ;
                 PAIR ;
                 SELF ;
                 ADDRESS ;
                 SENDER ;
                 DIG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 SOME ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 CAR ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CAR ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 ADD ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 OR ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 SELF ;
                 ADDRESS ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 CDR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 PUSH bool False ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 4 ;
                 CAR ;
                 PAIR ;
                 SOME ;
                 DIG 4 ;
                 UPDATE ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 CAR ;
                 PAIR ;
                 DUG 2 ;
                 CONS ;
                 PAIR } } } }

