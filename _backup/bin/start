#!/usr/bin/env bash
set -e

STACK_UI_DEF=${STACK_UI_DEF:-ui-dev}
STACK_API_SERVER_DEF=${STACK_API_SERVER_DEF:-api-server-dev}

source ${BASH_SOURCE%/*}/setup-env
docker info | grep "Swarm: active" || docker swarm init

# Docker is causing headaches with strange race conditions that require
# directories to exist as conflictig times.
# This is an extra measure to try to mitigate....
mkdir -p $PGDATA

# NOTE: UI won't refresh after a 'Module not found' TypeScript error.
# This file is generated into the client source - set a placeholder before
# generation so it can be referenced before it's updated
set -C
! echo "{}" > "$PROJECT_ROOT_DIR/client/src/config.json"
! echo "{}" > "$PROJECT_ROOT_DIR/server/src/config.json"
set +C

UI_STACK_FILE=$DOCKER_STACK_DIR/${STACK_UI_DEF}.yml
API_SERVER_STACK_FILE=$DOCKER_STACK_DIR/${STACK_API_SERVER_DEF}.yml

echo "Using ${UI_STACK_FILE}"
echo "Using ${API_SERVER_STACK_FILE}"

#note that network alone can't be deployed to stack
#also default network can't be created with docker network create
docker stack deploy \
       -c $DOCKER_STACK_DIR/network.yml \
       -c $DOCKER_STACK_DIR/gateway.yml \
       $STACK_NAME

ENV_START_SCRIPT=$PROJECT_ROOT_DIR/bin/${ENV_NAME}/start
[ -f $ENV_START_SCRIPT ] && $ENV_START_SCRIPT

pushd $PROJECT_ROOT_DIR; yarn bootstrap ; popd

docker stack deploy -c $UI_STACK_FILE $STACK_NAME
docker stack deploy -c $API_SERVER_STACK_FILE $STACK_NAME

$PROJECT_ROOT_DIR/bin/start-ipfs

docker stack services $STACK_NAME
